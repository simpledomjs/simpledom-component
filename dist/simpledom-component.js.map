{"version":3,"sources":["webpack://SimpleDomComponent/webpack/universalModuleDefinition","webpack://SimpleDomComponent/webpack/bootstrap","webpack://SimpleDomComponent/./src/util.js","webpack://SimpleDomComponent/./src/converter.js","webpack://SimpleDomComponent/./src/Store.js","webpack://SimpleDomComponent/./src/renderer.js","webpack://SimpleDomComponent/./src/Component.js","webpack://SimpleDomComponent/./src/main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isFunction","constructor","apply","dasherize","what","replace","$1","toLowerCase","flatten","array","Array","isArray","reduce","one","two","concat","convertToNode","element","store","componentList","isComponent","componentInstance","componentClass","_objectSpread","props","push","renderComponent","otherRef","isElem","__asHtml","document","createTextNode","node","createElement","attrs","undefined","startsWith","eventKey","substring","addEventListener","event","toString","styleKey","style","classValue","classList","add","setAttribute","updateAttrs","childLength","children","length","index","childElement","childNode","insertAdjacentHTML","appendChild","generatedId","Store","initialeState","arguments","_classCallCheck","this","state","subscribers","componentsSubscribes","componentsToUnmount","newState","oldState","Store_objectSpread","_len","events","_key","sourceEvent","eventsToPropagate","id","callback","component","componentWrapper","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","componentAlreadySubcribes","err","return","subscribes","_arr","keys","_i","forEach","componentDidUnmount","el","renderer_objectSpread","filter","child","renderToDom","renderComponents","components","realNode","getElementById","firstChild","removeChild","cleanAnGetNode","map","componentDidMount","refreshComponentsToObserve","body","contains","mutationObserver","disconnect","unsubscribeAll","splice","_ref","unsubscribeByEventAndId","MutationObserver","observe","childList","subtree","renderToString","_len2","elements","_key2","attributes","attribute","_typeof","join","content","_toConsumableArray","renderTo","_len3","_key3","Component","_this","Component_classCallCheck","getOwnPropertyNames","getPrototypeOf","Function","eventsToSubscribe","subscribe","reactToChangeState","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","eventsToReact","react","ref","Component_createClass","oldNode","console","warn","Error","newNode","parentNode","replaceChild","mustRefresh","refresh","_this2","result","render","nodeRefHandler","width","height","oldRef","error","predicate","cond","elseElement","__webpack_exports__","Component_Component","renderer_el"],"mappings":"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","file":"simpledom-component.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleDomComponent\"] = factory();\n\telse\n\t\troot[\"SimpleDomComponent\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\n\nexport function isFunction(object) {\n    return !!(object && object.constructor && object.call && object.apply);\n}\n\n\nexport function dasherize(what) {\n    return what.replace(/([A-Z])/g, function($1){return \"-\"+$1.toLowerCase();});\n}\n\nexport function flatten(array) {\n    if (!Array.isArray(array)) {\n        return array;\n    }\n    return array.reduce(\n        (one, two) => one.concat(Array.isArray(two) ? flatten(two) : two), []\n    );\n}","\nimport {dasherize} from './util';\n\nexport function updateAttrs(node, element) {\n    for (let key in element.attrs) {\n        if (element.attrs.hasOwnProperty(key) && element.attrs[key] !== undefined) {\n            let value = element.attrs[key];\n            if (key === 'ref') {\n                value(node);\n            } else if (key.startsWith('on')) {\n                const eventKey = key.substring(2).toLowerCase();\n                node.addEventListener(eventKey, event => value(event));\n            } else {\n                if (key === 'className') {\n                    key = 'class';\n                }\n                key = dasherize(key);\n                if (key === 'style' && Object.prototype.toString.call(value) == '[object Object]') {\n                    for (const styleKey in value) {\n                        if (value.hasOwnProperty(styleKey)) {\n                            node.style[dasherize(styleKey)] = value[styleKey]\n                        }\n                    }\n                } else if (key === 'class' && Object.prototype.toString.call(value) == '[object Object]') {\n                    for (const classValue in value) {\n                        if (value.hasOwnProperty(classValue) && value[classValue]) {\n                            node.classList.add(dasherize(classValue));\n                        }\n                    }\n                } else {\n                    node.setAttribute(key, value);\n                }\n            }\n        }\n    }\n}\n\nexport function convertToNode(element, store, componentList) {\n    if (element === undefined || element === null) {\n        return undefined;\n    }\n\n    if (element.isComponent) {\n        let componentInstance = new element.componentClass({...element.props}, store);\n        componentList.push(componentInstance);\n        return convertToNode(componentInstance.renderComponent(element.otherRef), store, componentList);\n    }\n\n    if (!element.isElem) {\n        return element.__asHtml ? element : document.createTextNode('' + element);\n    }\n\n    const node = document.createElement(element.name);\n\n    updateAttrs(node, element);\n\n    const childLength = element.children.length;\n\n    for (let index = 0; index < childLength; index++) {\n        const childElement = element.children[index];\n        if (childElement !== undefined && childElement !== null) {\n            const childNode = convertToNode(childElement, store, componentList);\n            if (childNode !== undefined && childNode !== null) {\n                if (childNode.__asHtml) {\n                    node.insertAdjacentHTML('beforeend', childNode.__asHtml);\n                } else {\n                    node.appendChild(childNode);\n                }\n            }\n        }\n    }\n\n    return node;\n}\n\n","\n\nlet generatedId = 1;\n\nfunction generateId() {\n    return generatedId++;\n}\n\n/**\n * A simple Store which receive all state changes with an event (string).\n */\nexport class Store {\n    /**\n     * The constructor.\n     * @param {object} initialeState the initial state.\n     */\n    constructor(initialeState = {}) {\n        /**\n         * The state of store.\n         * @type {object}\n         */\n        this.state = initialeState;\n        /**\n         * Don't touch :)\n         * @type {Object}\n         */\n        this.subscribers = {};\n\n        /**\n         * Don't touch :)\n         * @type {Array}\n         */\n        this.componentsSubscribes = [];\n\n        /**\n         * Don't touch :)\n         * @type {Array}\n         */\n        this.componentsToUnmount = [];\n    }\n\n    /**\n     * Method to call to change the state.\n     * @param {object} newState the new state (you can put only attributes changed).\n     * @param {...string} events events to the origin of the state change.\n     */\n    updateState(newState, ...events) {\n        const oldState = this.state;\n        this.state = {...this.state, ...newState};\n        \n        const sourceEvent = events.length === 1 ? events[0] : events;\n\n        const eventsToPropagate = events.concat('*');\n\n        let index = eventsToPropagate.length;\n        while (index--) {\n            const event = eventsToPropagate[index];\n            if (this.subscribers[event]) {\n                for (const id in this.subscribers[event]) {\n                    if (this.subscribers[event].hasOwnProperty(id)) {\n                        this.subscribers[event][id](event === '*' ? sourceEvent : event, this.state, oldState);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method to call to subscribe to an event.\n     *\n     * There is a special event that catches all events : '*'.\n     *\n     * @param {string} event event to subscribe.\n     * @param {function(event: string, state: object, oldState:object)} callback the callback called when receive the event.\n     * @param {Component} component use internally to unsubcribe component when node disappear\n     * @return {number} the id to put in param of {@link unsubscribe} to unsubscribe.\n     */\n    subscribe(event, callback = state => {}, component) {\n        if (!this.subscribers[event]) {\n            this.subscribers[event] = {};\n        }\n        const id = generateId();\n        this.subscribers[event][id] = callback;\n\n        if (component) {\n            let componentWrapper = undefined;\n            for (const componentAlreadySubcribes of this.componentsSubscribes) {\n                if (componentAlreadySubcribes.component === component) {\n                    componentWrapper = componentAlreadySubcribes;\n                    break;\n                }\n            }\n            if (!componentWrapper) {\n                componentWrapper = {\n                    component,\n                    subscribes: []\n                };\n                this.componentsSubscribes.push(componentWrapper);\n            }\n            componentWrapper.subscribes.push({\n                event,\n                id\n            });\n        }\n\n        return id;\n    }\n\n    /**\n     * Unsubscribe.\n     * @param {number} id id received at {@link subscribe}\n     */\n    unsubsribe(id) {\n        for (let event of Object.keys(this.subscribers)) {\n            if (this.subscribers[event][id]) {\n                delete this.subscribers[event][id];\n            }\n        }\n    }\n\n    /**\n     * Unsubcribe all subcribers.\n     */\n    unsubscribeAll() {\n        this.subscribers = {};\n        this.componentsSubscribes = [];\n        this.componentsToUnmount.forEach(component => component.componentDidUnmount());\n        this.componentsToUnmount = [];\n    }\n\n\n\n    /**\n     * Unsubscribe.\n     * @param {string} event event sent to {@link subscribe}\n     * @param {number} id id received at {@link subscribe}\n     */\n    unsubscribeByEventAndId(event, id) {\n        if (this.subscribers[event][id]) {\n            delete this.subscribers[event][id];\n        }\n    }\n}\n","import { convertToNode } from './converter';\nimport { flatten, dasherize, isFunction } from './util';\nimport { Store } from './Store';\n\n\n/**\n * JSX factory function to create an object representing a dom node. Designed to be used with a JSX transpiler.\n * @param {Object|Component|string|function} element the name of the tag, or a {@link Component}.\n * @param {Object} attrs properties of the node, a plain old JS object. Not optional, if no value, put empty object.\n * @param {Array} children the children of the node, a vararg\n * @return {Object} an object representing a dom node.\n */\nexport function el(element, attrs, ...children) {\n    if (element && element.isComponent) {\n        const props = {\n            ...attrs,\n            children: (flatten(children) || []).filter(child => child !== null && child !== undefined)\n        };\n        return {\n            isComponent: true,\n            componentClass: element,\n            props\n        };\n    } else {\n        if (isFunction(element)) {\n            return element(attrs, ...children);\n        }\n        return {\n            name: element,\n            attrs: attrs || {},\n            children: (flatten(children) || []).filter(child => child !== null && child !== undefined),\n            isElem: true\n        };\n    }\n}\n\nfunction cleanAnGetNode(node) {\n    let realNode = node;\n    if (typeof node === 'string') {\n        realNode = document.getElementById(node);\n    }\n\n    while (realNode.firstChild) {\n        realNode.removeChild(realNode.firstChild);\n    }\n    return realNode;\n}\n\n/**\n * Render a component to the dom.\n * @param {string|Node} node the id or the node where the component must be rendered.\n * @param {Component} component the component to render.\n * @param {Store} store the store\n */\nexport function renderToDom(node, component, store = new Store()) {\n\n    renderComponents(node, [component], store);\n}\n\nfunction renderComponents(node, components, store = new Store()) {\n\n    const realNode = cleanAnGetNode(node);\n\n    const componentList = [];\n\n    flatten(components).filter(component => component !== undefined && component !== null)\n        .map(component => convertToNode(component, store, componentList))\n        .forEach(node => realNode.appendChild(node));\n\n    componentList.forEach(component => component.componentDidMount());\n\n    if (componentList.length) {\n\n        \n\n        store.refreshComponentsToObserve = function() {\n            if (!document.body.contains(realNode)) {\n                store.mutationObserver && store.mutationObserver .disconnect();\n                store.unsubscribeAll();\n            }\n            for (let index = store.componentsToUnmount.length -1; index >= 0; index--) {\n                const component = store.componentsToUnmount[index];\n                if (component.node && !realNode.contains(component.node)) {\n                    component.componentDidUnmount();\n                    store.componentsToUnmount.splice(index, 1);\n                }\n            }\n            for (let index = store.componentsSubscribes.length - 1; index >= 0; index--) {\n                const component = store.componentsSubscribes[index];\n                if (component.component.node && !realNode.contains(component.component.node)) {\n                    component.subscribes.forEach(({event, id}) => store.unsubscribeByEventAndId(event, id));\n                    component.component.node = undefined;\n                    store.componentsSubscribes.splice(index, 1);\n                }\n            }\n        };\n        \n        store.mutationObserver = new MutationObserver(() =>\n            store.refreshComponentsToObserve && store.refreshComponentsToObserve()\n        );\n        \n        store.mutationObserver.observe(document.body, {childList: true, subtree: true});\n    }\n}\n\n/**\n * Render some elements into a string.\n * @param {Array} elements elements returned by {@link el} or primitive like string.\n * @return {string} html as a string.\n */\nexport function renderToString(...elements) {\n    return flatten(elements).map(el => {\n        if (!el.name) {\n            return '' + (el.__asHtml || el);\n        }\n        const attributes = Object.keys(el.attrs)\n            .filter(attribute => !attribute.startsWith('on') && el.attrs[attribute] !== undefined && attribute !== 'ref')\n            .map(attribute => {\n                const key = dasherize(attribute === 'className' ? 'class' : attribute);\n                let value = el.attrs[attribute];\n                if (key === 'style' && typeof value === 'object') {\n                    value = Object.keys(value)\n                        .map(key => '' + dasherize(key) + ':' + value[key])\n                        .join(';');\n                } else if (key === 'class' && typeof value === 'object') {\n                    value = Object.keys(value).filter(classValue => value[classValue])\n                        .map(dasherize)\n                        .join(' ');\n                }\n\n                return ` ${key}=\"${value}\"`\n            })\n            .join('');\n        const content = renderToString(...el.children);\n        return `<${el.name}${attributes}>${content}</${el.name}>`\n    }).join('');\n}\n\n\n/**\n * Render some elements into a node.\n * @param {string|Node} node the id or the node where the component must be rendered.\n * @param {Array} elements elements returned by {@link el} or primitive like string.\n */\nexport function renderTo(node, ...elements) {\n    renderComponents(node, elements)\n}\n","\nimport { el } from './renderer';\nimport { convertToNode } from './converter';\n\n/**\n * Class for a component.\n * ```\n *   class HelloWorldComponent extends Component {\n *      render() {\n *          return (\n *              <h1>{this.props.message}</h1>\n *          );\n *      }\n *   }\n *\n *   renderToDom('container', <HelloWorldComponent messsage=\"Hello World!\"/>);\n * ```\n */\nexport class Component {\n    static isComponent = true;\n\n    /**\n     * The state of the current store\n     * @type {Object}\n     */\n    get state() {\n        return this.store.state;\n    }\n\n    /**\n     * Constructor of a component.\n     * @param {Object} props the props (attributes pass to dom node + children)\n     * @param {Store} store the store.\n     */\n    constructor(props, store = undefined) {\n        /**\n         * The props  (attributes pass to dom node + children).\n         * @type {Object}\n         */\n        this.props = props;\n        /**\n         * The store share between all components.\n         * @type {Store}\n         */\n        this.store = store;\n\n        Object.getOwnPropertyNames(Object.getPrototypeOf(this))\n            .filter(name => name !== 'constructor')\n            .filter(name => this[name] instanceof Function)\n            .forEach(name => this[name] = this[name].bind(this));\n\n        for (const event of this.eventsToSubscribe()) {\n            this.store.subscribe(event, this.reactToChangeState.bind(this), this);\n        }\n\n        for (const event of this.eventsToReact()) {\n            this.store.subscribe(event, this.react.bind(this), this);\n        }\n\n        if (this.componentDidUnmount) {\n            this.store.componentsToUnmount.push(this);\n        }\n\n        this.props.ref && this.props.ref(this);\n    }\n\n\n    /**\n     * Do not touch :)\n     * @param {Node} node parent node of the component.\n     */\n    nodeRefHandler(node) {\n        /**\n         * Parent node of the component.\n         * @type {Node}\n         */\n        this.node = node;\n        if (this.otherRef) {\n            this.otherRef(node);\n        }\n    }\n\n    /**\n     * Method to call to refresh the component without the use of the store.\n     * Useful for internal state with this.\n     */\n    refresh() {\n        const componentList = [];\n        const oldNode = this.node;\n        if (!oldNode) {\n            console.warn(\"It's you've done double refresh on same component, please don't do this\", new Error());\n        }\n        this.node = null;\n        let newNode = convertToNode(this.renderComponent(this.otherRef), this.store, componentList);\n        if (newNode === undefined || newNode === null) {\n            oldNode && oldNode.parentNode && oldNode.parentNode.removeChild(oldNode);\n            this.componentDidMount();\n            return;\n        }\n        oldNode && oldNode.parentNode && oldNode.parentNode.replaceChild(newNode, oldNode);\n        this.store.refreshComponentsToObserve && this.store.refreshComponentsToObserve();\n\n        this.componentDidMount();\n        componentList.forEach(component => component.componentDidMount());\n    }\n\n    /**\n     * Internally method which is called when an event of {@link eventsToSubscribe}\n     * You can override the method if you want a specific\n     * @param {string} event event received in the store.\n     * @param {Object} newState the new state.\n     * @param {Object} oldState the old state.\n     */\n    reactToChangeState(event, newState, oldState) {\n        if (!this.mustRefresh(oldState, newState) || !this.node) {\n            return;\n        }\n\n        this.componentDidUnmount && this.componentDidUnmount();\n        this.refresh();\n        this.componentDidMount();\n    }\n\n    /**\n     * Method to implement to react when an event is send to {@link Store}\n     * @return {Array} array of string events to react.\n     */\n    eventsToSubscribe() {\n        return [];\n    }\n\n\n    /**\n     * Method to implement to react when an event that does not imply re rendering is sent to {@link Store}\n     * @return {Array} array of string events to react without rendering.\n     */\n    eventsToReact() {\n        return [];\n    }\n\n    /**\n     * Method to implement called when an event that does not imply re rendering is sent to {@link Store}\n     * @param {String} event to react on\n     */\n    react(event) {\n    }\n\n    /**\n     * Return false to avoid call to render on an event.\n     * @param {Object} oldState the old state.\n     * @param {Object} newState the new state.\n     */\n    mustRefresh(oldState, newState) {\n        return true;\n    }\n\n    /**\n     * Method called after rendered into DOM.\n     * @abstract\n     */\n    componentDidMount() {\n    }\n\n    /**\n     * Method use internally to render a component.\n     * @return {Component|Object} This return a component or result of SimpleDom.el.\n     */\n    renderComponent(otherRef) {\n        const result = this.render();\n        this.otherRef = otherRef;\n        if (result === undefined || result === null) {\n            return el('div',\n                {\n                    ref: node => this.nodeRefHandler(node),\n                    style: {\n                        width: 0,\n                        height: 0\n                    }\n                }\n            );\n        }\n\n        if (result.isElem) {\n            let oldRef = result.attrs.ref;\n            result.attrs.ref = node => {\n                oldRef && oldRef(node);\n                this.nodeRefHandler(node);\n            };\n        } else if (result.isComponent) {\n            result.otherRef = node => this.nodeRefHandler(node);\n        } else {\n            console.error('Unkown result type for a component', result);\n        }\n\n        return result;\n    }\n\n    /**\n     * Method to implement to render something.\n     * @abstract\n     * @return {Component|Object} This return a component or result of {@link el}.\n     */\n    render() {\n        return undefined;\n    }\n\n}\n","export { Component } from './Component';\nexport { Store } from './Store';\nexport { el, renderToDom, renderTo, renderToString } from './renderer';\nimport { isFunction } from  './util';\n\n/**\n * Can be used as a simple if/else statement info your jsx :\n * ```\n *  SimpleDom.renderTo('container',\n *      <div>\n *          SimpleDom.predicate(myCondition,\n *              <h1>myCondition is true</h1>,\n *              <h1>myCondition is false</h1>\n *          )\n *      </div>\n *  );\n * ```\n * @param {boolean|function():boolean} cond condition to evaluate\n * @param {*} element element to return if cond is true (if it's a function, the result of the function is returned).\n * @param {*} elseElement element to return if cond is false (if it's a function, the result of the function is returned).\n * @return {*} element or elseElement depending of cond value.\n */\nexport function predicate(cond, element, elseElement) {\n    const isTrue = isFunction(cond) ? cond() : cond;\n    if (isTrue) {\n        return isFunction(element) ? element() : element;\n    }\n    return isFunction(elseElement) ? elseElement() : elseElement;\n}\n"],"sourceRoot":""}